{"version":3,"sources":["images/logo-white.png","components/BaseLayoutStyle.ts","components/Header.tsx","components/MenuComponent.tsx","components/BaseLayout.tsx","App.tsx","serviceWorker.ts","index.tsx","images/logo-black.png"],"names":["module","exports","styled","section","theme","BlackLogo","WhiteLogo","Header","props","className","menuToggle","icon","faGithub","onClick","setTheme","globalTheme","MenuComponent","show","BaseLayout","useState","setMenuToggle","console","log","style","display","justifyContent","paddingTop","width","alt","src","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,wC,8mECI5BC,UAAOC,QAAtB,KAGsB,mBACR,IADQ,EAAGC,MACrB,kDACO,mBACG,IADH,EAAGA,MACV,sDAkBoB,gBAAGA,EAAH,EAAGA,MAAH,MAClB,eAAU,IAAVA,EAAwBC,IAAsBC,IAA9C,QAgBkB,mBACR,IADQ,EAAGF,MACrB,gEAWM,mBAA0B,IAA1B,EAAGA,MAA8B,MAAQ,UA2B7B,mBACR,IADQ,EAAGA,MACrB,kDAYkB,mBACR,IADQ,EAAGA,MACrB,4D,gBCjESG,MAtBf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,2BACX,yBAAKA,UAAS,sBAAiBD,EAAME,WAAa,WAAa,cAC/D,yBAAKD,UAAU,mBACX,yBAAKA,UAAS,sBAAiBD,EAAME,WAAa,WAAa,aAC3D,kBAAC,IAAD,CAAiBC,KAAMC,OAE3B,yBAAKH,UAAWD,EAAME,WAAa,WAAa,YAC5C,yBAAKD,UAAU,kBAAkBI,QAAS,WACtCL,EAAMM,UAAUN,EAAMO,eAEtB,yBAAKN,UAAU,oBCLxBO,MAZf,SAAuBR,GACnB,OACI,yBAAKC,UAAS,0BAAqBD,EAAMS,KAAO,WAAa,aACzD,yBAAKR,UAAU,SACX,qCACA,wCACA,uCCuCDS,MAxCf,SAAoBV,GAAe,IAAD,EACEW,oBAAS,GADX,mBACvBJ,EADuB,KACVD,EADU,OAEMK,oBAAS,GAFf,mBAEvBT,EAFuB,KAEXU,EAFW,KAI9B,OADAC,QAAQC,IAAIP,GAER,kBAAC,EAAD,CAAgBX,MAAOW,GACnB,yBAAKN,UAAU,kBACX,yBAAKA,UAAS,wBAAmBC,EAAa,cAAgB,cAAgBG,QAAS,kBAAMO,GAAeV,KACxG,yBAAKD,UAAS,uBAAkBC,EAAa,YAAc,wBAC3D,yBAAKD,UAAS,uBAAkBC,EAAa,WAAa,cAC1D,yBAAKD,UAAS,uBAAkBC,EAAa,YAAc,0BAGnE,kBAAC,EAAD,CAAeO,KAAMP,IACrB,kBAAC,EAAD,CACIK,YAAaA,EACbD,SAAUA,EACVJ,WAAYA,EACZU,cAAeA,IAGnB,yBAAKG,MAAO,CACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,KAEZ,yBAAKH,MAAO,CAAEI,MAAO,MACjB,yBAAKC,IAAI,GAAGL,MAAO,CAAEI,MAAO,QAAUE,IAAKd,EAAcV,IAAYC,QAK7E,6BACKE,EAAMsB,YCjCRC,MARf,WACE,OACE,kBAAC,EAAD,KACE,uCCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a,kBEjJ5BlD,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.0e37b0d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-white.526c731b.png\";","import styled from \"styled-components\";\r\nimport WhiteLogo from \"../images/logo-white.png\";\r\nimport BlackLogo from \"../images/logo-black.png\";\r\n\r\nexport default styled.section<{ theme: boolean }>`\r\n  transition: all 0.3s ease;\r\n  height: 100vh;\r\n  background-color: ${({ theme }) =>\r\n    theme === true ? `var(--white-bg-color)` : `var(--dark-bg-color)`};\r\n  color: ${({ theme }) =>\r\n    theme === true ? `var(--white-font-color)` : `var(--dark-font-color)`};\r\n  // 헤더 CSS\r\n  .header-wrap {\r\n    position: fixed;\r\n    box-sizing: border-box;\r\n    width: 100%;\r\n    height: 50px;\r\n  }\r\n  .header-wrap,\r\n  .header-nav-wrap,\r\n  .toggle-wrap {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .header-logo {\r\n    flex: 1;\r\n    height: 30px;\r\n    transition: all 0.3s ease;\r\n    background-image: ${({ theme }) =>\r\n      theme === true ? `url(${BlackLogo})` : `url(${WhiteLogo})`};\r\n    background-size: 30px;\r\n    background-repeat: no-repeat;\r\n  }\r\n  .header-nav-wrap {\r\n    flex: 2;\r\n    justify-content: flex-end;\r\n  }\r\n  .header-icon {\r\n    font-size: 1.25rem;\r\n  }\r\n  .toggle-wrap {\r\n    width: 35px;\r\n    height: 20px;\r\n    border-radius: 30px;\r\n    transition: all 0.3s ease;\r\n    background-color: ${({ theme }) =>\r\n      theme === true\r\n        ? `var(--white-toggle-bg-color)`\r\n        : `var(--dark-toggle-bg-color)`};\r\n    overflow: hidden;\r\n    padding: 0 1px;\r\n    margin-left: 15px;\r\n  }\r\n  .toggle-dot {\r\n    width: 18px;\r\n    height: 18px;\r\n    position: relative;\r\n    left: ${({ theme }) => (theme === true ? \"0px\" : \"17px\")};\r\n    border-radius: 100px;\r\n    transition: all 0.3s ease;\r\n    background-color: #fff;\r\n    box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.7);\r\n  }\r\n  .hamberger-wrap {\r\n    position: fixed;\r\n    z-index: 20;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    height: 50px;\r\n    right: 0;\r\n  }\r\n  .menu-wrap {\r\n    display: flex;\r\n    width: 25px;\r\n    height: 30px;\r\n    margin-right: 15px;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n  .menu-btn-bar {\r\n    width: 100%;\r\n    height: 4px;\r\n    transition: all 0.3s ease;\r\n    background-color: ${({ theme }) =>\r\n      theme === true ? `var(--dark-bg-color)` : `var(--white-bg-color)`};\r\n    margin-bottom: 5px;\r\n  }\r\n  .menu-btn-bar:last-child {\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  .menu-modal-wrap {\r\n    position: fixed;\r\n    opacity: 0;\r\n    z-index: 0;\r\n    transition: all 0.3s ease;\r\n    background-color: ${({ theme }) =>\r\n      theme === true\r\n        ? `var(--dark-menu-bg-color)`\r\n        : `var(--white-menu-bg-color)`};\r\n    backdrop-filter: blur(7px);\r\n    color: var(--white-font-color);\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  // 메인 CSS\r\n  .main-wrap {\r\n    padding-top: 50px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\ntype Props = {\r\n    globalTheme: boolean;\r\n    setTheme: (bool: boolean) => void;\r\n    menuToggle: boolean;\r\n    setMenuToggle: (bool: boolean) => void;\r\n}\r\n\r\nfunction Header(props: Props) {\r\n    return (\r\n        <div className=\"header-wrap pdr-55-l-15\">\r\n            <div className={`header-logo ${props.menuToggle ? \"hide-box\" : \"show-box\"}`} />\r\n            <div className=\"header-nav-wrap\">\r\n                <div className={`header-icon ${props.menuToggle ? \"hide-box\" : \"show-box\"}`}>\r\n                    <FontAwesomeIcon icon={faGithub} />\r\n                </div>\r\n                <div className={props.menuToggle ? \"hide-box\" : \"show-box\"}>\r\n                    <div className=\"toggle-wrap cur\" onClick={() => {\r\n                        props.setTheme(!props.globalTheme)\r\n                    }} >\r\n                        <div className=\"toggle-dot\" />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\ntype Props = {\r\n    show: boolean;\r\n}\r\n\r\nfunction MenuComponent(props: Props) {\r\n    return (\r\n        <div className={`menu-modal-wrap ${props.show ? \"show-box\" : \"hide-box\"}`}>\r\n            <div className=\"pd-20\">\r\n                <h1>MENU.</h1>\r\n                <h2>PROJECT.</h2>\r\n                <h2>ETC.</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MenuComponent;","import React, { useState } from 'react';\r\nimport BaseLayoutWrap from \"./BaseLayoutStyle\";\r\nimport Header from \"./Header\";\r\nimport WhiteLogo from \"../images/logo-white.png\";\r\nimport BlackLogo from \"../images/logo-black.png\";\r\nimport MenuComponent from './MenuComponent';\r\n\r\ntype Props = {\r\n    children: JSX.Element;\r\n}\r\n\r\nfunction BaseLayout(props: Props) {\r\n    const [globalTheme, setTheme] = useState(false)\r\n    const [menuToggle, setMenuToggle] = useState(false)\r\n    console.log(globalTheme)\r\n    return (\r\n        <BaseLayoutWrap theme={globalTheme}>\r\n            <div className=\"hamberger-wrap\">\r\n                <div className={`menu-wrap cur ${menuToggle ? \"origin-menu\" : \"trans-menu\"}`} onClick={() => setMenuToggle(!menuToggle)}>\r\n                    <div className={`menu-btn-bar ${menuToggle ? \"ham-ani-1\" : \"ham-ani-none none1\"}`} />\r\n                    <div className={`menu-btn-bar ${menuToggle ? \"hide-box\" : \"show-box\"}`} />\r\n                    <div className={`menu-btn-bar ${menuToggle ? \"ham-ani-2\" : \"ham-ani-none none2\"}`} />\r\n                </div>\r\n            </div>\r\n            <MenuComponent show={menuToggle} />\r\n            <Header\r\n                globalTheme={globalTheme}\r\n                setTheme={setTheme}\r\n                menuToggle={menuToggle}\r\n                setMenuToggle={setMenuToggle}\r\n            />\r\n            {/* 임시 */}\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                paddingTop: 90\r\n            }}>\r\n                <div style={{ width: 300 }}>\r\n                    <img alt=\"\" style={{ width: \"100%\" }} src={globalTheme ? BlackLogo : WhiteLogo} />\r\n                </div>\r\n            </div>\r\n            {/* 임시 */}\r\n            {/* <div className=\"main-wrap\"> */}\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n\r\n        </BaseLayoutWrap>\r\n    );\r\n}\r\n\r\nexport default BaseLayout;","import React from \"react\";\r\nimport BaseLayout from \"./components/BaseLayout\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BaseLayout>\r\n      <></>\r\n    </BaseLayout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo-black.ce86f21e.png\";"],"sourceRoot":""}